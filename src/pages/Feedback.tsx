import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card'
import { Button } from '../components/ui/button'
import { Input } from '../components/ui/input'
import { Textarea } from '../components/ui/textarea'
import { Badge } from '../components/ui/badge'
import { 
  MessageCircle, 
  Send, 
  Star,
  ThumbsUp,
  ThumbsDown,
  Loader2,
  CheckCircle,
  Heart
} from 'lucide-react'
import { useState } from 'react'
import toast from 'react-hot-toast'

const feedbackTypes = [
  {
    id: 'bug',
    title: 'B√°o c√°o l·ªói',
    description: 'Ph√°t hi·ªán l·ªói trong ·ª©ng d·ª•ng',
    icon: 'üêõ',
    color: 'from-red-500 to-pink-500'
  },
  {
    id: 'feature',
    title: 'ƒê·ªÅ xu·∫•t t√≠nh nƒÉng',
    description: 'G·ª£i √Ω t√≠nh nƒÉng m·ªõi',
    icon: 'üí°',
    color: 'from-blue-500 to-cyan-500'
  },
  {
    id: 'improvement',
    title: 'C·∫£i thi·ªán',
    description: 'ƒê·ªÅ xu·∫•t c·∫£i thi·ªán t√≠nh nƒÉng hi·ªán c√≥',
    icon: '‚ö°',
    color: 'from-green-500 to-emerald-500'
  },
  {
    id: 'content',
    title: 'N·ªôi dung',
    description: 'Ph·∫£n h·ªìi v·ªÅ n·ªôi dung h·ªçc t·∫≠p',
    icon: 'üìö',
    color: 'from-purple-500 to-pink-500'
  }
]

const ratingLabels = [
  'R·∫•t kh√¥ng h√†i l√≤ng',
  'Kh√¥ng h√†i l√≤ng',
  'B√¨nh th∆∞·ªùng',
  'H√†i l√≤ng',
  'R·∫•t h√†i l√≤ng'
]

export const Feedback = () => {
  const [formData, setFormData] = useState({
    type: '',
    rating: 0,
    title: '',
    description: '',
    email: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      toast.success('C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† c·∫£i thi·ªán d·ª±a tr√™n √Ω ki·∫øn c·ªßa b·∫°n.')
      setFormData({
        type: '',
        rating: 0,
        title: '',
        description: '',
        email: ''
      })
    } catch (error) {
      toast.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleInputChange = (field: string, value: string | number) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const renderStars = () => {
    return (
      <div className="flex items-center gap-2">
        {[1, 2, 3, 4, 5].map((star) => (
          <button
            key={star}
            type="button"
            onClick={() => handleInputChange('rating', star)}
            className={`p-1 transition-colors ${
              star <= formData.rating
                ? 'text-yellow-400'
                : 'text-gray-300 hover:text-yellow-300'
            }`}
          >
            <Star className="h-6 w-6 fill-current" />
          </button>
        ))}
        {formData.rating > 0 && (
          <span className="text-sm text-gray-600 ml-2">
            {ratingLabels[formData.rating - 1]}
          </span>
        )}
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">G√≥p √Ω & Ph·∫£n h·ªìi</h1>
          <p className="text-gray-600">Ch√∫ng t√¥i r·∫•t tr√¢n tr·ªçng √Ω ki·∫øn c·ªßa b·∫°n ƒë·ªÉ c·∫£i thi·ªán d·ªãch v·ª•</p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Heart className="h-5 w-5 text-red-500" />
              Chia s·∫ª √Ω ki·∫øn c·ªßa b·∫°n
            </CardTitle>
            <CardDescription>
              Ph·∫£n h·ªìi c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán tr·∫£i nghi·ªám h·ªçc t·∫≠p
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Feedback Type */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Lo·∫°i ph·∫£n h·ªìi *
                </label>
                <div className="grid md:grid-cols-2 gap-4">
                  {feedbackTypes.map((type) => (
                    <div
                      key={type.id}
                      className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 ${
                        formData.type === type.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => handleInputChange('type', type.id)}
                    >
                      <div className="flex items-center gap-3">
                        <div className={`w-10 h-10 bg-gradient-to-r ${type.color} rounded-lg flex items-center justify-center text-white text-lg`}>
                          {type.icon}
                        </div>
                        <div>
                          <h4 className="font-medium text-gray-900">{type.title}</h4>
                          <p className="text-sm text-gray-600">{type.description}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Rating */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  ƒê√°nh gi√° t·ªïng th·ªÉ *
                </label>
                {renderStars()}
              </div>

              {/* Title */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ti√™u ƒë·ªÅ *
                </label>
                <Input
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  placeholder="T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ ph·∫£n h·ªìi c·ªßa b·∫°n"
                  required
                />
              </div>

              {/* Description */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√¥ t·∫£ chi ti·∫øt *
                </label>
                <Textarea
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ v·∫•n ƒë·ªÅ, ƒë·ªÅ xu·∫•t ho·∫∑c ph·∫£n h·ªìi c·ªßa b·∫°n..."
                  rows={6}
                  required
                />
              </div>

              {/* Email (Optional) */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email (t√πy ch·ªçn)
                </label>
                <Input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  placeholder="ƒê·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá l·∫°i n·∫øu c·∫ßn"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá l·∫°i ƒë·ªÉ l√†m r√µ th√™m th√¥ng tin
                </p>
              </div>

              {/* Submit Button */}
              <div className="flex items-center gap-4">
                <Button 
                  type="submit" 
                  className="flex-1"
                  disabled={isSubmitting || !formData.type || !formData.rating || !formData.title || !formData.description}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin mr-2" />
                      ƒêang g·ª≠i...
                    </>
                  ) : (
                    <>
                      <Send className="h-4 w-4 mr-2" />
                      G·ª≠i ph·∫£n h·ªìi
                    </>
                  )}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        {/* Thank You Message */}
        <Card className="mt-8 bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <CheckCircle className="h-6 w-6 text-green-500" />
              <div>
                <h3 className="font-semibold text-gray-900">C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω!</h3>
                <p className="text-sm text-gray-600">
                  M·ªói ph·∫£n h·ªìi c·ªßa b·∫°n ƒë·ªÅu c√≥ gi√° tr·ªã v√† gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª• t·ªët h∆°n.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


